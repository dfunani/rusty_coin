#[derive(Debug)]
pub enum Status {
    NEW,
    ACTIVE,
    INACTIVE,
    DISABLED,
    DELETED,
}

impl Status {
    pub fn to_string(&self) -> String {
        use Status::{ACTIVE, DELETED, DISABLED, INACTIVE, NEW};
        match self {
            NEW => String::from("New"),
            ACTIVE => String::from("Active"),
            INACTIVE => String::from("Inactive"),
            DISABLED => String::from("Disabled"),
            DELETED => String::from("Deleted"),
        }
    }
}

#[derive(Debug)]
pub enum Role {
    ADMIN,
    USER,
    DEVELOPER,
}

impl Role {
    pub fn to_string(&self) -> String {
        use Role::{ADMIN, DEVELOPER, USER};
        match self {
            ADMIN => String::from("Admin"),
            USER => String::from("User"),
            DEVELOPER => String::from("Developer"),
        }
    }
}

#[derive(Debug)]
pub enum Interest {
    ANIMALS,
    ART,
    BEACH,
    BOARDGAMES,
    BOOKS,
    COOKING,
    CRAFTS,
    CRYPTO,
    DANCING,
    DECENTRALIZATION,
    DRAWING,
    ENTREPRENEURSHIP,
    EXERCISE,
    FASHION,
    FITNESS,
    FOOD,
    GAMING,
    GARDENING,
    HEALTHWELLNESS,
    HIKING,
    HOMEDECOR,
    LANGUAGES,
    MOVIES,
    MUSIC,
    NATURE,
    PAINTING,
    PHOTOGRAPHY,
    POETRY,
    READING,
    RUNNING,
    SCIENCE,
    SELFIMPROVEMENT,
    SHOPPING,
    SPORTS,
    TECHNOLOGY,
    TRAVEL,
    VOLUNTEERING,
    WRITING,
    ASTROLOGY,
    ASTRONOMY,
    COFFEE,
    TEA,
    HISTORY,
    PHILOSOPHY,
    CINEMA,
    THEATER,
    MUSICPRODUCTION,
    DANCE,
    FITNESSCLASSES,
    YOGA,
    MEDITATION,
    PODCASTS,
    COMICS,
    VIDEOGAMES,
    CARDGAMES,
    POLITICS,
    ENVIRONMENT,
    TRADING,
    INVESTING,
    FINANCE,
    ARTIFICIALINTELLIGENCE,
    MACHINELEARNING,
    DATASCIENCE,
    CYBERSECURITY,
    WEBDEVELOPMENT,
    MOBILEDEVELOPMENT,
    BLOCKCHAIN,
    DEFI,
    NFTS,
    DAPPS,
    CRYPTOTRADING,
    MINING,
    WEB3,
    CRYPTOINVESTING,
    BLOCKCHAINDEVELOPMENT,
    GENEALOGY,
    ANIME,
    MANGA,
    COSPLAY,
    URBANEXPLORATION,
    SURFING,
    SKATEBOARDING,
    SNOWBOARDING,
    SKIING,
    CAMPING,
    BACKPACKING,
    SURVIVALISM,
    FORAGING,
    ARTISANALCRAFTS,
    CALLIGRAPHY,
    GLASSBLOWING,
    POTTERY,
    KNITTING,
    CROCHETING,
    EMBROIDERY,
    SEWING,
    WOODWORKING,
    METALWORKING,
    LEATHERWORKING,
    BEEKEEPING,
    HOMEBREWING,
    WINEMAKING,
    SPIRITSDISTILLING,
    MIXOLOGY,
    COCKTAILS,
    BEER,
    WINE,
    WHISKY,
    RUM,
    VODKA,
    GIN,
    TEQUILA,
    BRANDY,
    CIDER,
    MEAD,
    SODA,
    JUICE,
}

impl Interest {
    pub fn to_string(&self) -> String {
        match self {
            Interest::ANIMALS => String::from("Animals"),
            Interest::ART => String::from("Art"),
            Interest::BEACH => String::from("Beach"),
            Interest::BOARDGAMES => String::from("Board Games"),
            Interest::BOOKS => String::from("Books"),
            Interest::COOKING => String::from("Cooking"),
            Interest::CRAFTS => String::from("Crafts"),
            Interest::CRYPTO => String::from("Cryptocurrency"),
            Interest::DANCING => String::from("Dancing"),
            Interest::DECENTRALIZATION => String::from("Decentralization"),
            Interest::DRAWING => String::from("Drawing"),
            Interest::ENTREPRENEURSHIP => String::from("Entrepreneurship"),
            Interest::EXERCISE => String::from("Exercise"),
            Interest::FASHION => String::from("Fashion"),
            Interest::FITNESS => String::from("Fitness"),
            Interest::FOOD => String::from("Food"),
            Interest::GAMING => String::from("Gaming"),
            Interest::GARDENING => String::from("Gardening"),
            Interest::HEALTHWELLNESS => String::from("Health & Wellness"),
            Interest::HIKING => String::from("Hiking"),
            Interest::HOMEDECOR => String::from("Home Decor"),
            Interest::LANGUAGES => String::from("Languages"),
            Interest::MOVIES => String::from("Movies"),
            Interest::MUSIC => String::from("Music"),
            Interest::NATURE => String::from("Nature"),
            Interest::PAINTING => String::from("Painting"),
            Interest::PHOTOGRAPHY => String::from("Photography"),
            Interest::POETRY => String::from("Poetry"),
            Interest::READING => String::from("Reading"),
            Interest::RUNNING => String::from("Running"),
            Interest::SCIENCE => String::from("Science"),
            Interest::SELFIMPROVEMENT => String::from("Self-Improvement"),
            Interest::SHOPPING => String::from("Shopping"),
            Interest::SPORTS => String::from("Sports"),
            Interest::TECHNOLOGY => String::from("Technology"),
            Interest::TRAVEL => String::from("Travel"),
            Interest::VOLUNTEERING => String::from("Volunteering"),
            Interest::WRITING => String::from("Writing"),
            Interest::ASTROLOGY => String::from("Astrology"),
            Interest::ASTRONOMY => String::from("Astronomy"),
            Interest::COFFEE => String::from("Coffee"),
            Interest::TEA => String::from("Tea"),
            Interest::HISTORY => String::from("History"),
            Interest::PHILOSOPHY => String::from("Philosophy"),
            Interest::CINEMA => String::from("Cinema"),
            Interest::THEATER => String::from("Theater"),
            Interest::MUSICPRODUCTION => String::from("Music Production"),
            Interest::DANCE => String::from("Dance"),
            Interest::FITNESSCLASSES => String::from("Fitness Classes"),
            Interest::YOGA => String::from("Yoga"),
            Interest::MEDITATION => String::from("Meditation"),
            Interest::PODCASTS => String::from("Podcasts"),
            Interest::COMICS => String::from("Comics"),
            Interest::VIDEOGAMES => String::from("Video Games"),
            Interest::CARDGAMES => String::from("Card Games"),
            Interest::POLITICS => String::from("Politics"),
            Interest::ENVIRONMENT => String::from("Environment"),
            Interest::TRADING => String::from("Trading"),
            Interest::INVESTING => String::from("Investing"),
            Interest::FINANCE => String::from("Finance"),
            Interest::ARTIFICIALINTELLIGENCE => String::from("Artificial Intelligence"),
            Interest::MACHINELEARNING => String::from("Machine Learning"),
            Interest::DATASCIENCE => String::from("Data Science"),
            Interest::CYBERSECURITY => String::from("Cybersecurity"),
            Interest::WEBDEVELOPMENT => String::from("Web Development"),
            Interest::MOBILEDEVELOPMENT => String::from("Mobile Development"),
            Interest::BLOCKCHAIN => String::from("Blockchain"),
            Interest::DEFI => String::from("DeFi"),
            Interest::NFTS => String::from("NFTs"),
            Interest::DAPPS => String::from("DApps"),
            Interest::CRYPTOTRADING => String::from("Crypto Trading"),
            Interest::MINING => String::from("Mining"),
            Interest::WEB3 => String::from("Web3"),
            Interest::CRYPTOINVESTING => String::from("Crypto Investing"),
            Interest::BLOCKCHAINDEVELOPMENT => String::from("Blockchain Development"),
            Interest::GENEALOGY => String::from("Genealogy"),
            Interest::ANIME => String::from("Anime"),
            Interest::MANGA => String::from("Manga"),
            Interest::COSPLAY => String::from("Cosplay"),
            Interest::URBANEXPLORATION => String::from("Urban Exploration"),
            Interest::SURFING => String::from("Surfing"),
            Interest::SKATEBOARDING => String::from("Skateboarding"),
            Interest::SNOWBOARDING => String::from("Snowboarding"),
            Interest::SKIING => String::from("Skiing"),
            Interest::CAMPING => String::from("Camping"),
            Interest::BACKPACKING => String::from("Backpacking"),
            Interest::SURVIVALISM => String::from("Survivalism"),
            Interest::FORAGING => String::from("Foraging"),
            Interest::ARTISANALCRAFTS => String::from("Artisanal Crafts"),
            Interest::CALLIGRAPHY => String::from("Calligraphy"),
            Interest::GLASSBLOWING => String::from("Glassblowing"),
            Interest::POTTERY => String::from("Pottery"),
            Interest::KNITTING => String::from("Knitting"),
            Interest::CROCHETING => String::from("Crocheting"),
            Interest::EMBROIDERY => String::from("Embroidery"),
            Interest::SEWING => String::from("Sewing"),
            Interest::WOODWORKING => String::from("Woodworking"),
            Interest::METALWORKING => String::from("Metalworking"),
            Interest::LEATHERWORKING => String::from("Leatherworking"),
            Interest::BEEKEEPING => String::from("Beekeeping"),
            Interest::HOMEBREWING => String::from("Homebrewing"),
            Interest::WINEMAKING => String::from("Wine Making"),
            Interest::SPIRITSDISTILLING => String::from("Spirits Distilling"),
            Interest::MIXOLOGY => String::from("Mixology"),
            Interest::COCKTAILS => String::from("Cocktails"),
            Interest::BEER => String::from("Beer"),
            Interest::WINE => String::from("Wine"),
            Interest::WHISKY => String::from("Whisky"),
            Interest::RUM => String::from("Rum"),
            Interest::VODKA => String::from("Vodka"),
            Interest::GIN => String::from("Gin"),
            Interest::TEQUILA => String::from("Tequila"),
            Interest::BRANDY => String::from("Brandy"),
            Interest::CIDER => String::from("Cider"),
            Interest::MEAD => String::from("Mead"),
            Interest::SODA => String::from("Soda"),
            Interest::JUICE => String::from("Juice"),
        }
    }
}

#[derive(Debug)]
pub enum Verification {
    UNVERIFIED,
    VERIFIED,
    VERIFYING,
    FAILED,
    EXPIRED,
}

impl Verification {
    pub fn to_string(&self) -> String {
        match self {
            Verification::UNVERIFIED => String::from("New and Unverified"),
            Verification::VERIFIED => String::from("Verified"),
            Verification::VERIFYING => String::from("Verification Requested"),
            Verification::FAILED => String::from("Verification Failed"),
            Verification::EXPIRED => String::from("Verification Request Expired"),
        }
    }
}

#[derive(Debug)]
pub enum ProfileVisibility {
    PRIVATE,
    PUBLIC,
    ADMIN,
}

impl ProfileVisibility {
    pub fn to_string(&self) -> String {
        match self {
            ProfileVisibility::PRIVATE => String::from("Private"),
            ProfileVisibility::PUBLIC => String::from("Public"),
            ProfileVisibility::ADMIN => String::from("ADMIN"),
        }
    }
}

#[derive(Debug)]
pub enum DataSharingPreference {
    ACCOUNT,
    PROFILE,
    SETTINGS,
    TRANSACTIONS,
}

impl DataSharingPreference {
    pub fn to_string(&self) -> String {
        match self {
            DataSharingPreference::ACCOUNT => String::from("Share All Permissible Account Data."),
            DataSharingPreference::PROFILE => String::from("Share Profile Data."),
            DataSharingPreference::SETTINGS => String::from("Share Settings Data."),
            DataSharingPreference::TRANSACTIONS => String::from("Share Transaction Data."),
        }
    }
}

#[derive(Debug)]
pub enum Communication {
    EMAIL,
    SMS,
    CELL,
    SLACK,
}

impl Communication {
    pub fn to_string(&self) -> String {
        match self {
            Communication::EMAIL => String::from("Email Messenger"),
            Communication::SMS => String::from("SMS"),
            Communication::CELL => String::from("Mobile Phone"),
            Communication::SLACK => String::from("Slack Messenger"),
        }
    }
}

#[derive(Debug)]
pub enum Theme {
    SYSTEM,
    DARK,
    LIGHT,
    RED,
    GREEN,
    BLUE,
}

impl Theme {
    pub fn to_string(&self) -> String {
        match self {
            Theme::SYSTEM => String::from("Defaults to Device Settings."),
            Theme::DARK => String::from("DARK Theme Preferred."),
            Theme::LIGHT => String::from("Light Theme Preferred."),
            Theme::RED => String::from("Red Theme Preferred."),
            Theme::GREEN => String::from("Green Theme Preferred."),
            Theme::BLUE => String::from("Blue Theme Preferred."),
        }
    }
}

#[derive(Debug)]
pub enum CardType {
    CHEQUE,
    SAVINGS,
    CREDIT,
}

impl CardType {
    pub fn to_string(&self) -> (String, String) {
        match self {
            CardType::CHEQUE => (String::from("cheque"), String::from("1991")),
            CardType::SAVINGS => (String::from("savings"), String::from("1992")),
            CardType::CREDIT => (String::from("credit"), String::from("1993")),
        }
    }
}

#[derive(Debug)]
pub enum LoginMethod {
    EMAIL,
    GITHUB,
    SLACK,
    GOOGLE,
    FACEBOOK,
}

impl LoginMethod {
    pub fn to_string(&self) -> String {
        match self {
            LoginMethod::EMAIL => String::from("User Email and Password"),
            LoginMethod::GITHUB => String::from("Github SSO"),
            LoginMethod::SLACK => String::from("Slack SSO"),
            LoginMethod::GOOGLE => String::from("Google SSO"),
            LoginMethod::FACEBOOK => String::from("Facebook SSO"),
        }
    }
}

#[derive(Debug)]
pub enum Country {
    AFGHANISTAN,
    ALBANIA,
    ALGERIA,
    ANDORRA,
    ANGOLA,
    ANTIGUAANBARBUDA,
    ARGENTINA,
    ARMENIA,
    AUSTRALIA,
    AUSTRIA,
    AZERBAIJAN,
    BAHAMAS,
    BAHRAIN,
    BANGLADESH,
    BARBADOS,
    BELARUS,
    BELGIUM,
    BELIZE,
    BENIN,
    BHUTAN,
    BOLIVIA,
    BOSNIAANHERZEGOVINA,
    BOTSWANA,
    BRAZIL,
    BRUNEI,
    BULGARIA,
    BURKINAFASO,
    BURUNDI,
    CABO_VERDE,
    CAMBODIA,
    CAMEROON,
    CANADA,
    CENTRALAFRICANREPUBLIC,
    CHAD,
    CHILE,
    CHINA,
    COLOMBIA,
    COMOROS,
    CONGODEMOCRATICREPUBLIC,
    CONGOREPUBLIC,
    COSTARICA,
    COTEDIVOIRE,
    CROATIA,
    CUBA,
    CYPRUS,
    CZECHREPUBLIC,
    DENMARK,
    DJIBOUTI,
    DOMINICA,
    DOMINICANREPUBLIC,
    ECUADOR,
    EGYPT,
    ELSALVADOR,
    EQUATORIALGUINEA,
    ERITREA,
    ESTONIA,
    ESWATINI,
    ETHIOPIA,
    FIJI,
    FINLAND,
    FRANCE,
    GABON,
    GAMBIA,
    GEORGIA,
    GERMANY,
    GHANA,
    GREECE,
    GRENADA,
    GUATEMALA,
    GUINEA,
    GUINEABISSAU,
    GUYANA,
    HAITI,
    HONDURAS,
    HUNGARY,
    ICELAND,
    INDIA,
    INDONESIA,
    IRAN,
    IRAQ,
    IRELAND,
    ISRAEL,
    ITALY,
    JAMAICA,
    JAPAN,
    JORDAN,
    KAZAKHSTAN,
    KENYA,
    KIRIBATI,
    KOREANORTH,
    KOREASOUTH,
    KOSOVO,
    KUWAIT,
    KYRGYZSTAN,
    LAOS,
    LATVIA,
    LEBANON,
    LESOTHO,
    LIBERIA,
    LIBYA,
    LIECHTENSTEIN,
    LITHUANIA,
    LUXEMBOURG,
    MADAGASCAR,
    MALAWI,
    MALAYSIA,
    MALDIVES,
    MALI,
    MALTA,
    MARSHALLISLANDS,
    MAURITANIA,
    MAURITIUS,
    MEXICO,
    MICRONESIA,
    MOLDOVA,
    MONACO,
    MONGOLIA,
    MONTENEGRO,
    MOROCCO,
    MOZAMBIQUE,
    MYANMAR,
    NAMIBIA,
    NAURU,
    NEPAL,
    NETHERLANDS,
    NEWZEALAND,
    NICARAGUA,
    NIGER,
    NIGERIA,
    NORTHMACEDONIA,
    NORWAY,
    OMAN,
    PAKISTAN,
    PALAU,
    PALESTINE,
    PANAMA,
    PAPUANEWGUINEA,
    PARAGUAY,
    PERU,
    PHILIPPINES,
    POLAND,
    PORTUGAL,
    QATAR,
    ROMANIA,
    RUSSIA,
    RWANDA,
    SAINTKITTSANNEVIS,
    SAINTLUCIA,
    SAINTVINCENTANGRENADINES,
    SAMOA,
    SANMARINO,
    SAOTOMEANPRINCIPE,
    SAUDIARABIA,
    SENEGAL,
    SERBIA,
    SEYCHELLES,
    SIERRALEONE,
    SINGAPORE,
    SLOVAKIA,
    SLOVENIA,
    SOLOMONISLANDS,
    SOMALIA,
    SOUTHAFRICA,
    SOUTHSUDAN,
    SPAIN,
    SRILANKA,
    SUDAN,
    SURINAME,
    SWEDEN,
    SWITZERLAND,
    SYRIA,
    TAIWAN,
    TAJIKISTAN,
    TANZANIA,
    THAILAND,
    TIMORLESTE,
    TOGO,
    TONGA,
    TRINIDADANTOBAGO,
    TUNISIA,
    TURKEY,
    TURKMENISTAN,
    TUVALU,
    UGANDA,
    UKRAINE,
    UNITEDARABEMIRATES,
    UNITEKINGDOM,
    UNITESTATES,
    URUGUAY,
    UZBEKISTAN,
    VANUATU,
    VATICANCITY,
    VENEZUELA,
    VIETNAM,
    YEMEN,
    ZAMBIA,
    ZIMBABWE,
}

impl Country {
    pub fn to_string(&self) -> (String, String) {
        match self {
            Country::AFGHANISTAN => (String::from("Afghanistan"), String::from("AF")),
            Country::ALBANIA => (String::from("Albania"), String::from("AL")),
            Country::ALGERIA => (String::from("Algeria"), String::from("DZ")),
            Country::ANDORRA => (String::from("Andorra"), String::from("AD")),
            Country::ANGOLA => (String::from("Angola"), String::from("AO")),
            Country::ANTIGUAANBARBUDA => (String::from("Antigua and Barbuda"), String::from("AG")),
            Country::ARGENTINA => (String::from("Argentina"), String::from("AR")),
            Country::ARMENIA => (String::from("Armenia"), String::from("AM")),
            Country::AUSTRALIA => (String::from("Australia"), String::from("AU")),
            Country::AUSTRIA => (String::from("Austria"), String::from("AT")),
            Country::AZERBAIJAN => (String::from("Azerbaijan"), String::from("AZ")),
            Country::BAHAMAS => (String::from("Bahamas"), String::from("BS")),
            Country::BAHRAIN => (String::from("Bahrain"), String::from("BH")),
            Country::BANGLADESH => (String::from("Bangladesh"), String::from("BD")),
            Country::BARBADOS => (String::from("Barbados"), String::from("BB")),
            Country::BELARUS => (String::from("Belarus"), String::from("BY")),
            Country::BELGIUM => (String::from("Belgium"), String::from("BE")),
            Country::BELIZE => (String::from("Belize"), String::from("BZ")),
            Country::BENIN => (String::from("Benin"), String::from("BJ")),
            Country::BHUTAN => (String::from("Bhutan"), String::from("BT")),
            Country::BOLIVIA => (String::from("Bolivia"), String::from("BO")),
            Country::BOSNIAANHERZEGOVINA => {
                (String::from("Bosnia and Herzegovina"), String::from("BA"))
            }
            Country::BOTSWANA => (String::from("Botswana"), String::from("BW")),
            Country::BRAZIL => (String::from("Brazil"), String::from("BR")),
            Country::BRUNEI => (String::from("Brunei"), String::from("BN")),
            Country::BULGARIA => (String::from("Bulgaria"), String::from("BG")),
            Country::BURKINAFASO => (String::from("Burkina Faso"), String::from("BF")),
            Country::BURUNDI => (String::from("Burundi"), String::from("BI")),
            Country::CABO_VERDE => (String::from("Cabo Verde"), String::from("CV")),
            Country::CAMBODIA => (String::from("Cambodia"), String::from("KH")),
            Country::CAMEROON => (String::from("Cameroon"), String::from("CM")),
            Country::CANADA => (String::from("Canada"), String::from("CA")),
            Country::CENTRALAFRICANREPUBLIC => {
                (String::from("Central African Republic"), String::from("CF"))
            }
            Country::CHAD => (String::from("Chad"), String::from("TD")),
            Country::CHILE => (String::from("Chile"), String::from("CL")),
            Country::CHINA => (String::from("China"), String::from("CN")),
            Country::COLOMBIA => (String::from("Colombia"), String::from("CO")),
            Country::COMOROS => (String::from("Comoros"), String::from("KM")),
            Country::CONGODEMOCRATICREPUBLIC => (
                String::from("Congo Democratic Republic"),
                String::from("CD"),
            ),
            Country::CONGOREPUBLIC => (
                String::from("Congo (R)String::from(epublic))"),
                String::from("CG"),
            ),
            Country::COSTARICA => (
                String::from("Costa String::from(R))ica"),
                String::from("CR"),
            ),
            Country::COTEDIVOIRE => (String::from("Côte d' Ivoire"), String::from("CI")),
            Country::CROATIA => (String::from("Croatia"), String::from("HR")),
            Country::CUBA => (String::from("Cuba"), String::from("CU")),
            Country::CYPRUS => (String::from("Cyprus"), String::from("CY")),
            Country::CZECHREPUBLIC => (
                String::from("Czech String::from(R))epublic"),
                String::from("CZ"),
            ),
            Country::DENMARK => (String::from("Denmark"), String::from("DK")),
            Country::DJIBOUTI => (String::from("Djibouti"), String::from("DJ")),
            Country::DOMINICA => (String::from("Dominica"), String::from("DM")),
            Country::DOMINICANREPUBLIC => (
                String::from("Dominican String::from(R))epublic"),
                String::from("DO"),
            ),
            Country::ECUADOR => (String::from("Ecuador"), String::from("EC")),
            Country::EGYPT => (String::from("Egypt"), String::from("EG")),
            Country::ELSALVADOR => (
                String::from("El String::from(S))alvador"),
                String::from("SV"),
            ),
            Country::EQUATORIALGUINEA => (
                String::from("Equatorial String::from(G))uinea"),
                String::from("GQ"),
            ),
            Country::ERITREA => (String::from("Eritrea"), String::from("ER")),
            Country::ESTONIA => (String::from("Estonia"), String::from("EE")),
            Country::ESWATINI => (String::from("Eswatini"), String::from("SZ")),
            Country::ETHIOPIA => (String::from("Ethiopia"), String::from("ET")),
            Country::FIJI => (String::from("Fiji"), String::from("FJ")),
            Country::FINLAND => (String::from("Finland"), String::from("FI")),
            Country::FRANCE => (String::from("France"), String::from("FR")),
            Country::GABON => (String::from("Gabon"), String::from("GA")),
            Country::GAMBIA => (String::from("Gambia"), String::from("GM")),
            Country::GEORGIA => (String::from("Georgia"), String::from("GE")),
            Country::GERMANY => (String::from("Germany"), String::from("DE")),
            Country::GHANA => (String::from("Ghana"), String::from("GH")),
            Country::GREECE => (String::from("Greece"), String::from("GR")),
            Country::GRENADA => (String::from("Grenada"), String::from("GD")),
            Country::GUATEMALA => (String::from("Guatemala"), String::from("GT")),
            Country::GUINEA => (String::from("Guinea"), String::from("GN")),
            Country::GUINEABISSAU => (String::from("Guinea-Bissau"), String::from("GW")),
            Country::GUYANA => (String::from("Guyana"), String::from("GY")),
            Country::HAITI => (String::from("Haiti"), String::from("HT")),
            Country::HONDURAS => (String::from("Honduras"), String::from("HN")),
            Country::HUNGARY => (String::from("Hungary"), String::from("HU")),
            Country::ICELAND => (String::from("Iceland"), String::from("IS")),
            Country::INDIA => (String::from("India"), String::from("IN")),
            Country::INDONESIA => (String::from("Indonesia"), String::from("ID")),
            Country::IRAN => (String::from("Iran"), String::from("IR")),
            Country::IRAQ => (String::from("Iraq"), String::from("IQ")),
            Country::IRELAND => (String::from("Ireland"), String::from("IE")),
            Country::ISRAEL => (String::from("Israel"), String::from("IL")),
            Country::ITALY => (String::from("Italy"), String::from("IT")),
            Country::JAMAICA => (String::from("Jamaica"), String::from("JM")),
            Country::JAPAN => (String::from("Japan"), String::from("JP")),
            Country::JORDAN => (String::from("Jordan"), String::from("JO")),
            Country::KAZAKHSTAN => (String::from("Kazakhstan"), String::from("KZ")),
            Country::KENYA => (String::from("Kenya"), String::from("KE")),
            Country::KIRIBATI => (String::from("Kiribati"), String::from("KI")),
            Country::KOREANORTH => (
                String::from("Korea (N)String::from(orth))"),
                String::from("KP"),
            ),
            Country::KOREASOUTH => (
                String::from("Korea (S)String::from(outh))"),
                String::from("KR"),
            ),
            Country::KOSOVO => (String::from("Kosovo"), String::from("XK")),
            Country::KUWAIT => (String::from("Kuwait"), String::from("KW")),
            Country::KYRGYZSTAN => (String::from("Kyrgyzstan"), String::from("KG")),
            Country::LAOS => (String::from("Laos"), String::from("LA")),
            Country::LATVIA => (String::from("Latvia"), String::from("LV")),
            Country::LEBANON => (String::from("Lebanon"), String::from("LB")),
            Country::LESOTHO => (String::from("Lesotho"), String::from("LS")),
            Country::LIBERIA => (String::from("Liberia"), String::from("LR")),
            Country::LIBYA => (String::from("Libya"), String::from("LY")),
            Country::LIECHTENSTEIN => (String::from("Liechtenstein"), String::from("LI")),
            Country::LITHUANIA => (String::from("Lithuania"), String::from("LT")),
            Country::LUXEMBOURG => (String::from("Luxembourg"), String::from("LU")),
            Country::MADAGASCAR => (String::from("Madagascar"), String::from("MG")),
            Country::MALAWI => (String::from("Malawi"), String::from("MW")),
            Country::MALAYSIA => (String::from("Malaysia"), String::from("MY")),
            Country::MALDIVES => (String::from("Maldives"), String::from("MV")),
            Country::MALI => (String::from("Mali"), String::from("ML")),
            Country::MALTA => (String::from("Malta"), String::from("MT")),
            Country::MARSHALLISLANDS => (
                String::from("Marshall String::from(I))slands"),
                String::from("MH"),
            ),
            Country::MAURITANIA => (String::from("Mauritania"), String::from("MR")),
            Country::MAURITIUS => (String::from("Mauritius"), String::from("MU")),
            Country::MEXICO => (String::from("Mexico"), String::from("MX")),
            Country::MICRONESIA => (String::from("Micronesia"), String::from("FM")),
            Country::MOLDOVA => (String::from("Moldova"), String::from("MD")),
            Country::MONACO => (String::from("Monaco"), String::from("MC")),
            Country::MONGOLIA => (String::from("Mongolia"), String::from("MN")),
            Country::MONTENEGRO => (String::from("Montenegro"), String::from("ME")),
            Country::MOROCCO => (String::from("Morocco"), String::from("MA")),
            Country::MOZAMBIQUE => (String::from("Mozambique"), String::from("MZ")),
            Country::MYANMAR => (String::from("Myanmar"), String::from("MM")),
            Country::NAMIBIA => (String::from("Namibia"), String::from("NA")),
            Country::NAURU => (String::from("Nauru"), String::from("NR")),
            Country::NEPAL => (String::from("Nepal"), String::from("NP")),
            Country::NETHERLANDS => (String::from("Netherlands"), String::from("NL")),
            Country::NEWZEALAND => (
                String::from("New String::from(Z))ealand"),
                String::from("NZ"),
            ),
            Country::NICARAGUA => (String::from("Nicaragua"), String::from("NI")),
            Country::NIGER => (String::from("Niger"), String::from("NE")),
            Country::NIGERIA => (String::from("Nigeria"), String::from("NG")),
            Country::NORTHMACEDONIA => (
                String::from("North String::from(M))acedonia"),
                String::from("MK"),
            ),
            Country::NORWAY => (String::from("Norway"), String::from("NO")),
            Country::OMAN => (String::from("Oman"), String::from("OM")),
            Country::PAKISTAN => (String::from("Pakistan"), String::from("PK")),
            Country::PALAU => (String::from("Palau"), String::from("PW")),
            Country::PALESTINE => (String::from("Palestine"), String::from("PS")),
            Country::PANAMA => (String::from("Panama"), String::from("PA")),
            Country::PAPUANEWGUINEA => (String::from("Papua New Guinea"), String::from("PG")),
            Country::PARAGUAY => (String::from("Paraguay"), String::from("PY")),
            Country::PERU => (String::from("Peru"), String::from("PE")),
            Country::PHILIPPINES => (String::from("Philippines"), String::from("PH")),
            Country::POLAND => (String::from("Poland"), String::from("PL")),
            Country::PORTUGAL => (String::from("Portugal"), String::from("PT")),
            Country::QATAR => (String::from("Qatar"), String::from("QA")),
            Country::ROMANIA => (String::from("Romania"), String::from("RO")),
            Country::RUSSIA => (String::from("Russia"), String::from("RU")),
            Country::RWANDA => (String::from("Rwanda"), String::from("RW")),
            Country::SAINTKITTSANNEVIS => {
                (String::from("Saint Kitts and Nevis"), String::from("KN"))
            }
            Country::SAINTLUCIA => (
                String::from("Saint String::from(L))ucia"),
                String::from("LC"),
            ),
            Country::SAINTVINCENTANGRENADINES => (
                String::from("Saint Vincent and the Grenadines"),
                String::from("VC"),
            ),
            Country::SAMOA => (String::from("Samoa"), String::from("WS")),
            Country::SANMARINO => (
                String::from("San String::from(M))arino"),
                String::from("SM"),
            ),
            Country::SAOTOMEANPRINCIPE => {
                (String::from("Sao Tome and Principe"), String::from("ST"))
            }
            Country::SAUDIARABIA => (
                String::from("Saudi String::from(A))rabia"),
                String::from("SA"),
            ),
            Country::SENEGAL => (String::from("Senegal"), String::from("SN")),
            Country::SERBIA => (String::from("Serbia"), String::from("RS")),
            Country::SEYCHELLES => (String::from("Seychelles"), String::from("SC")),
            Country::SIERRALEONE => (
                String::from("Sierra String::from(L))eone"),
                String::from("SL"),
            ),
            Country::SINGAPORE => (String::from("Singapore"), String::from("SG")),
            Country::SLOVAKIA => (String::from("Slovakia"), String::from("SK")),
            Country::SLOVENIA => (String::from("Slovenia"), String::from("SI")),
            Country::SOLOMONISLANDS => (
                String::from("Solomon String::from(I))slands"),
                String::from("SB"),
            ),
            Country::SOMALIA => (String::from("Somalia"), String::from("SO")),
            Country::SOUTHAFRICA => (
                String::from("South String::from(A))frica"),
                String::from("ZA"),
            ),
            Country::SOUTHSUDAN => (
                String::from("South String::from(S))udan"),
                String::from("SS"),
            ),
            Country::SPAIN => (String::from("Spain"), String::from("ES")),
            Country::SRILANKA => (String::from("Sri String::from(L))anka"), String::from("LK")),
            Country::SUDAN => (String::from("Sudan"), String::from("SD")),
            Country::SURINAME => (String::from("Suriname"), String::from("SR")),
            Country::SWEDEN => (String::from("Sweden"), String::from("SE")),
            Country::SWITZERLAND => (String::from("Switzerland"), String::from("CH")),
            Country::SYRIA => (String::from("Syria"), String::from("SY")),
            Country::TAIWAN => (String::from("Taiwan"), String::from("TW")),
            Country::TAJIKISTAN => (String::from("Tajikistan"), String::from("TJ")),
            Country::TANZANIA => (String::from("Tanzania"), String::from("TZ")),
            Country::THAILAND => (String::from("Thailand"), String::from("TH")),
            Country::TIMORLESTE => (String::from("Timor-Leste"), String::from("TL")),
            Country::TOGO => (String::from("Togo"), String::from("TG")),
            Country::TONGA => (String::from("Tonga"), String::from("TO")),
            Country::TRINIDADANTOBAGO => (String::from("Trinidad and Tobago"), String::from("TT")),
            Country::TUNISIA => (String::from("Tunisia"), String::from("TN")),
            Country::TURKEY => (String::from("Turkey"), String::from("TR")),
            Country::TURKMENISTAN => (String::from("Turkmenistan"), String::from("TM")),
            Country::TUVALU => (String::from("Tuvalu"), String::from("TV")),
            Country::UGANDA => (String::from("Uganda"), String::from("UG")),
            Country::UKRAINE => (String::from("Ukraine"), String::from("UA")),
            Country::UNITEDARABEMIRATES => {
                (String::from("United Arab Emirates"), String::from("AE"))
            }
            Country::UNITEKINGDOM => (String::from("United Kingdom"), String::from("GB")),
            Country::UNITESTATES => (String::from("United States"), String::from("US")),
            Country::URUGUAY => (String::from("Uruguay"), String::from("UY")),
            Country::UZBEKISTAN => (String::from("Uzbekistan"), String::from("UZ")),
            Country::VANUATU => (String::from("Vanuatu"), String::from("VU")),
            Country::VATICANCITY => (
                String::from("Vatican String::from(C))ity"),
                String::from("VA"),
            ),
            Country::VENEZUELA => (String::from("Venezuela"), String::from("VE")),
            Country::VIETNAM => (String::from("Vietnam"), String::from("VN")),
            Country::YEMEN => (String::from("Yemen"), String::from("YE")),
            Country::ZAMBIA => (String::from("Zambia"), String::from("ZM")),
            Country::ZIMBABWE => (String::from("Zimbabwe"), String::from("ZW")),
        }
    }
}
